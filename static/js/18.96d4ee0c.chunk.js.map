{"version":3,"sources":["shared/components/CardChart.js"],"names":["labelFormatter","label","format","Date","calculateMin","data","yKey","factor","max","Number","POSITIVE_INFINITY","forEach","element","Math","round","options","CardChart","state","anchorEl","selectedOption","handleClick","event","setState","currentTarget","formatter","value","props","title","getSeconds","Error","getSubtitle","processData","seconds","minSeconds","arr","i","length","timestamp","unshift","selectOption","handleClose","this","color","classes","theme","height","open","Boolean","pt","px","pb","display","justifyContent","variant","aria-label","aria-owns","undefined","aria-haspopup","onClick","id","onClose","PaperProps","style","maxHeight","width","map","option","key","selected","name","className","cardContentInner","type","dataKey","domain","hide","stroke","fill","cursor","contentStyle","border","padding","spacing","borderRadius","shape","boxShadow","shadows","labelStyle","typography","body1","itemStyle","fontSize","letterSpacing","fontFamily","lineHeight","fontWeight","PureComponent","withStyles","marginTop","withTheme"],"mappings":"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","file":"static/js/18.96d4ee0c.chunk.js","sourcesContent":["import React, { PureComponent } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {\r\n  AreaChart,\r\n  Area,\r\n  XAxis,\r\n  Tooltip,\r\n  ResponsiveContainer,\r\n  YAxis\r\n} from \"recharts\";\r\nimport format from \"date-fns/format\";\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n  IconButton,\r\n  Menu,\r\n  MenuItem,\r\n  withStyles,\r\n  Box\r\n} from \"@material-ui/core\";\r\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\r\n\r\nconst styles = theme => ({\r\n  cardContentInner: {\r\n    marginTop: theme.spacing(-4)\r\n  }\r\n});\r\n\r\nfunction labelFormatter(label) {\r\n  return format(new Date(label * 1000), \"MMMM d, p yyyy\");\r\n}\r\n\r\nfunction calculateMin(data, yKey, factor) {\r\n  let max = Number.POSITIVE_INFINITY;\r\n  data.forEach(element => {\r\n    if (max > element[yKey]) {\r\n      max = element[yKey];\r\n    }\r\n  });\r\n  return Math.round(max - max * factor);\r\n}\r\n\r\nconst itemHeight = 216;\r\nconst options = [\"1 Week\", \"1 Month\", \"6 Months\"];\r\n\r\nclass CardChart extends PureComponent {\r\n  state = { anchorEl: null, selectedOption: \"1 Month\" };\r\n\r\n  handleClick = event => {\r\n    this.setState({ anchorEl: event.currentTarget });\r\n  };\r\n\r\n  formatter = value => {\r\n    return [value, this.props.title];\r\n  };\r\n\r\n  getSeconds = () => {\r\n    const { selectedOption } = this.state;\r\n    switch (selectedOption) {\r\n      case \"1 Week\":\r\n        return 60 * 60 * 24 * 7;\r\n      case \"1 Month\":\r\n        return 60 * 60 * 24 * 7 * 31;\r\n      case \"6 Months\":\r\n        return 60 * 60 * 24 * 7 * 31 * 6;\r\n      default:\r\n        throw new Error(\"No branch selected in switch-statement\");\r\n    }\r\n  };\r\n\r\n  getSubtitle = () => {\r\n    const { selectedOption } = this.state;\r\n    switch (selectedOption) {\r\n      case \"1 Week\":\r\n        return \"Last week\";\r\n      case \"1 Month\":\r\n        return \"Last month\";\r\n      case \"6 Months\":\r\n        return \"Last 6 months\";\r\n      default:\r\n        throw new Error(\"No branch selected in switch-statement\");\r\n    }\r\n  };\r\n\r\n  processData = () => {\r\n    const { data } = this.props;\r\n    const seconds = this.getSeconds();\r\n    const minSeconds = new Date() / 1000 - seconds;\r\n    const arr = [];\r\n    for (let i = 0; i < data.length; i += 1) {\r\n      if (minSeconds < data[i].timestamp) {\r\n        arr.unshift(data[i]);\r\n      }\r\n    }\r\n    return arr;\r\n  };\r\n\r\n  selectOption = selectedOption => {\r\n    this.setState({ selectedOption, anchorEl: null });\r\n  };\r\n\r\n  handleClose = () => {\r\n    this.setState({ anchorEl: null });\r\n  };\r\n\r\n  render() {\r\n    const { color, data, title, classes, theme, height } = this.props;\r\n    const { anchorEl, selectedOption } = this.state;\r\n    const open = Boolean(anchorEl);\r\n    return (\r\n      <Card>\r\n        <Box pt={2} px={2} pb={4}>\r\n          <Box display=\"flex\" justifyContent=\"space-between\">\r\n            <div>\r\n              <Typography variant=\"subtitle1\">{title}</Typography>\r\n              <Typography variant=\"body2\" color=\"textSecondary\">\r\n                {this.getSubtitle()}\r\n              </Typography>\r\n            </div>\r\n            <div>\r\n              <IconButton\r\n                aria-label=\"More\"\r\n                aria-owns={open ? \"long-menu\" : undefined}\r\n                aria-haspopup=\"true\"\r\n                onClick={this.handleClick}\r\n              >\r\n                <MoreVertIcon />\r\n              </IconButton>\r\n              <Menu\r\n                id=\"long-menu\"\r\n                anchorEl={anchorEl}\r\n                open={open}\r\n                onClose={this.handleClose}\r\n                PaperProps={{\r\n                  style: {\r\n                    maxHeight: itemHeight,\r\n                    width: 200\r\n                  }\r\n                }}\r\n              >\r\n                {options.map(option => (\r\n                  <MenuItem\r\n                    key={option}\r\n                    selected={option === selectedOption}\r\n                    onClick={() => {\r\n                      this.selectOption(option);\r\n                    }}\r\n                    name={option}\r\n                  >\r\n                    {option}\r\n                  </MenuItem>\r\n                ))}\r\n              </Menu>\r\n            </div>\r\n          </Box>\r\n        </Box>\r\n        <CardContent>\r\n          <Box className={classes.cardContentInner} height={height}>\r\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n              <AreaChart data={this.processData()} type=\"number\">\r\n                <XAxis\r\n                  dataKey=\"timestamp\"\r\n                  type=\"number\"\r\n                  domain={[\"dataMin\", \"dataMax\"]}\r\n                  hide\r\n                />\r\n                <YAxis\r\n                  domain={[calculateMin(data, \"value\", 0.05), \"dataMax\"]}\r\n                  hide\r\n                />\r\n                <Area\r\n                  type=\"monotone\"\r\n                  dataKey=\"value\"\r\n                  stroke={color}\r\n                  fill={color}\r\n                />\r\n                <Tooltip\r\n                  labelFormatter={labelFormatter}\r\n                  formatter={this.formatter}\r\n                  cursor={false}\r\n                  contentStyle={{\r\n                    border: \"none\",\r\n                    padding: theme.spacing(1),\r\n                    borderRadius: theme.shape.borderRadius,\r\n                    boxShadow: theme.shadows[1]\r\n                  }}\r\n                  labelStyle={theme.typography.body1}\r\n                  itemStyle={{\r\n                    fontSize: theme.typography.body1.fontSize,\r\n                    letterSpacing: theme.typography.body1.letterSpacing,\r\n                    fontFamily: theme.typography.body1.fontFamily,\r\n                    lineHeight: theme.typography.body1.lineHeight,\r\n                    fontWeight: theme.typography.body1.fontWeight\r\n                  }}\r\n                />\r\n              </AreaChart>\r\n            </ResponsiveContainer>\r\n          </Box>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nCardChart.propTypes = {\r\n  color: PropTypes.string.isRequired,\r\n  data: PropTypes.array.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  classes: PropTypes.object.isRequired,\r\n  theme: PropTypes.object.isRequired,\r\n  height: PropTypes.string.isRequired\r\n};\r\n\r\nexport default withStyles(styles, { withTheme: true })(CardChart);\r\n"],"sourceRoot":""}